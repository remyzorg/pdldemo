(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

[%%client.start]

[@@@ocaml.warning "-33"]
open Pdldemo (* for dependency reasons *)
[@@@ocaml.warning "+33"]

(* This RPC is called when client application is initialized. This
   way, the server sends necessary cookies to the client (the mobile
   app) early on and subsequent requests from the client will contain
   the proper cookies.

   The RPC is empty by default, but you can add your own actions to be
   performed server side on first client request, if necessary. *)
let%server init_request _myid_o () =
  Lwt.return_unit

let%server init_request_rpc : (_, unit) Eliom_client.server_function =
  Eliom_client.server_function ~name:"Pdldemo_mobile.init_request"
    [%derive.json: unit]
    (Os_session.Opt.connected_rpc init_request)

let to_lwt f =
  let (wait, wakeup) = Lwt.wait () in
  f (Lwt.wakeup wakeup);
  wait

let ondeviceready =
  to_lwt (fun cont ->
    ignore @@ Dom.addEventListener Dom_html.document
      (Dom_html.Event.make "deviceready")
      (Dom_html.handler (fun _ -> cont (); Js._true))
      Js._false)

let app_started = ref false

let initial_change_page = ref None

let change_page_gen action =
  if !app_started then
    Lwt.async action
  else if !initial_change_page = None then
    initial_change_page := Some action

let change_page_uri uri =
  change_page_gen (fun () -> Eliom_client.change_page_uri uri)

let handle_initial_url () =
  let%lwt () = ~%init_request_rpc () in
  let%lwt () = ondeviceready in
  app_started := true;
  match !initial_change_page with
  | None ->
    Eliom_client.change_page ~replace:true
      ~service:Os_services.main_service () ()
  | Some action ->
    action ()

let () =
  Lwt.async @@ fun () ->
  if Eliom_client.is_client_app () then
    (* Initialize the application server-side; there should be a
       single initial request for that. *)
    let%lwt _ = Lwt_js_events.onload () in
    handle_initial_url ()
  else
    Lwt.return_unit

(* Reactivate comet on resume and online events *)

let () =
  Firebug.console##log (Js.string "adding resume/online listeners");
  let activate ev =
    ignore @@ Dom.addEventListener Dom_html.document (Dom_html.Event.make ev)
      (Dom_html.handler (fun _ ->
         Firebug.console##log(Js.string ev);
         Eliom_comet.activate (); Js._true)) Js._false
  in
  activate "online";
  activate "resume"

(* Restart on a given URL *)

let storage () =
  Js.Optdef.case (Dom_html.window##.localStorage)
    (fun () -> failwith "Browser storage not supported")
    (fun v -> v)

let () =
  let st = storage () in
  let lc = Js.string "__os_restart_url" in
  Js.Opt.case
    (st##getItem(lc))
    (fun () -> ())
    (fun url ->
       st##removeItem(lc);
       change_page_uri (Js.to_string url))

(* Handle universal links *)

type event =
  < url : Js.js_string Js.t Js.readonly_prop;
    scheme : Js.js_string Js.t Js.readonly_prop;
    host : Js.js_string Js.t Js.readonly_prop;
    path : Js.js_string Js.t Js.readonly_prop;
    params : 'a. 'a Js.t Js.readonly_prop
  >

let universal_links () =
  let%lwt () = ondeviceready in
  Lwt.return @@ Js.Optdef.to_option @@
  (Js.Unsafe.global##.universalLinks :
     < subscribe :
         Js.js_string Js.opt ->
         (event Js.t -> unit) Js.callback ->
         unit Js.meth;
       unsubscribe :
         Js.js_string Js.opt ->
         unit Js.meth
     > Js.t Js.Optdef.t)

let _ =
  match%lwt universal_links () with
  | Some universal_links ->
    Firebug.console##log (Js.string "Universal links: registering");
    universal_links##subscribe Js.null
      (Js.wrap_callback
         (fun (ev : event Js.t) ->
            Firebug.console##log_2
              (Js.string "Universal links: got link") (ev##.url);
            change_page_uri (Js.to_string ev##.url)));
    Firebug.console##log (Js.string "Universal links: registered");
    Lwt.return_unit
  | None ->
    Lwt.return_unit

(* Debugging *)

(* Enable debugging messages.

   If you need to display debugging messages in the client side JS
   debugger console, you can do so by uncommenting the following
   lines.  *)
(* let () = Eliom_config.debug_timings := true *)
(* let () = Lwt_log_core.add_rule "eliom:client*" Lwt_log.Debug *)
(* let () = Lwt_log_core.add_rule "os*" Lwt_log.Debug *)
